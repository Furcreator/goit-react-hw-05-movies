{"version":3,"file":"static/js/973.c1abfb94.chunk.js","mappings":"qPAEaA,EAAwBC,EAAAA,EAAAA,IAAH,0GAMrBC,EAAmBD,EAAAA,EAAAA,EAAH,sCAGhBE,EAAOF,EAAAA,EAAAA,KAAH,2F,qHCTJG,EAAYH,EAAAA,EAAAA,GAAH,+HAOTI,EAAYJ,EAAAA,EAAAA,GAAH,mFAKTK,EAAeL,EAAAA,EAAAA,EAAH,iE,SCMzB,EAhBoB,SAAC,GAAiB,IAAfM,EAAc,EAAdA,QACrB,OACE,SAACF,EAAD,UACGE,EAAQC,KAAI,SAAAC,GACX,OACE,UAACL,EAAD,YACE,UAACE,EAAD,YACE,SAAC,KAAD,UAAM,cAAgB,IAAEG,EAAKC,WAE/B,uBAAID,EAAKE,YAJKF,EAAKG,GAOxB,KAGN,E,wCCaD,EAzBgB,WACd,OAA8BC,EAAAA,EAAAA,UAAS,MAAvC,eAAON,EAAP,KAAgBO,EAAhB,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACQC,GAAaC,EAAAA,EAAAA,MAAbD,SAUR,OARAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAkBH,GACfI,MAAK,SAAAC,GACJR,EAAWQ,EAAKC,QACjB,IACAC,OAAM,SAAAT,GAAK,OAAIC,EAASD,EAAb,GACf,GAAE,CAACE,KAGF,gCACGF,IAAS,uBAAIA,IACbR,IAAW,SAAC,EAAD,CAAaA,QAASA,MAC/BA,GAA8B,IAAnBA,EAAQkB,UACpB,SAAC,IAAD,WACE,SAAC,IAAD,UAAsB,6BAK/B,C,yGC7BYC,EAAmBzB,EAAAA,GAAAA,IAAH,qGAMhB0B,EAAuB1B,EAAAA,GAAAA,EAAH,8I,yLCR3B2B,EAAU,mCACVC,EAAW,8BAEJC,EAAiB,mCAAG,6FACzBC,EADyB,UAChBF,EADgB,mCACmBD,EADnB,oBAERI,MAAMD,GAFE,cAEzBE,EAFyB,gBAGlBA,EAASC,OAHS,mFAAH,qDAMjBC,EAAY,mCAAG,WAAMvB,GAAN,gFACpBmB,EADoB,UACXF,EADW,mBACQjB,EADR,oBACsBgB,EADtB,oBAEHI,MAAMD,GAFH,cAEpBE,EAFoB,gBAGbA,EAASC,OAHI,mFAAH,sDAMZE,EAAc,mCAAG,WAAOC,EAAOC,GAAd,gFACtBP,EADsB,UACbF,EADa,gCACmBQ,EADnB,oDACoEC,EADpE,oBACoFV,GADpF,SAELI,MAAMD,GAFD,cAEtBE,EAFsB,gBAGfA,EAASC,OAHM,mFAAH,wDAMdK,EAAc,mCAAG,WAAM3B,GAAN,gFACtBmB,EADsB,UACbF,EADa,mBACMjB,EADN,2CAC2CgB,GAD3C,SAELI,MAAMD,GAFD,cAEtBE,EAFsB,gBAGfA,EAASC,OAHM,mFAAH,sDAMdd,EAAiB,mCAAG,WAAMR,GAAN,gFACvBmB,EADuB,UACdF,EADc,mBACKjB,EADL,2CAC0CgB,EAD1C,oBAEJI,MAAMD,GAFF,cAErBE,EAFqB,gBAGdA,EAASC,OAHK,mFAAH,qD","sources":["components/CastListItem/CastListItem.styled.jsx","components/ReviewsList/ReviewsList.styled.jsx","components/ReviewsList/ReviewsList.jsx","components/Reviews/Reviews.jsx","components/Reviews/Reviews.styled.jsx","utils/api.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const CastListItemContainer = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  gap: 5px;\n`;\nexport const CastListItemText = styled.p`\n  margin: 0;\n`;\nexport const Span = styled.span`\n  color: mediumvioletred;\n  font-size: 16px;\n  font-weight: 600;\n`;\n","import styled from '@emotion/styled';\n\nexport const ReviewsLi = styled.li`\n  border: dashed mediumvioletred;\n  list-style-type: none;\n  border-radius: 10px;\n  padding: 10px;\n`;\n\nexport const ReviewsUl = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n`;\nexport const ReviewerText = styled.p`\n  color: mediumvioletred;\n  margin: 0;\n`;\n","import { Span } from 'components/CastListItem/CastListItem.styled';\nimport { ReviewerText, ReviewsLi, ReviewsUl } from './ReviewsList.styled';\nimport PropTypes from 'prop-types';\n\nconst ReviewsList = ({ reviews }) => {\n  return (\n    <ReviewsUl>\n      {reviews.map(info => {\n        return (\n          <ReviewsLi key={info.id}>\n            <ReviewerText>\n              <Span>Reviewer:</Span> {info.author}\n            </ReviewerText>\n            <p>{info.content}</p>\n          </ReviewsLi>\n        );\n      })}\n    </ReviewsUl>\n  );\n};\nexport default ReviewsList;\nReviewsList.propTypes = {\n  reviews: PropTypes.array.isRequired,\n};\n","import ReviewsList from 'components/ReviewsList/ReviewsList';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getReviewsOfMovie } from 'utils/api';\nimport { NoReviewsAndCast, NoReviewsTextAndCast } from './Reviews.styled';\nimport PropTypes from 'prop-types';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState(null);\n  const [error, setError] = useState(null);\n  const { moviesId } = useParams();\n\n  useEffect(() => {\n    getReviewsOfMovie(moviesId)\n      .then(data => {\n        setReviews(data.results);\n      })\n      .catch(error => setError(error));\n  }, [moviesId]);\n\n  return (\n    <>\n      {error && <p>{error}</p>}\n      {reviews && <ReviewsList reviews={reviews}></ReviewsList>}\n      {(!reviews || reviews.length === 0) && (\n        <NoReviewsAndCast>\n          <NoReviewsTextAndCast>There is no reviews!</NoReviewsTextAndCast>\n        </NoReviewsAndCast>\n      )}\n    </>\n  );\n};\nexport default Reviews;\n\nReviews.propTypes = {\n  getReviewsOfMovie: PropTypes.func,\n};\n","import styled from 'styled-components';\n\nexport const NoReviewsAndCast = styled.div`\n  border: dashed mediumvioletred;\n  border-radius: 10px;\n  padding: 10px;\n`;\n\nexport const NoReviewsTextAndCast = styled.p`\n  font-weight: bold;\n  font-size: 30px;\n  letter-spacing: 0.06em;\n  color: mediumvioletred;\n  text-align: center;\n`;\n","const API_KEY = 'f8717161caaf1418c951ed37d4ef3a4b';\nconst BASE_URL = 'https://api.themoviedb.org/';\n\nexport const getTrendingMovies = async () => {\n  const URL = `${BASE_URL}3/movie/popular?api_key=${API_KEY}&page=1`;\n  const response = await fetch(URL);\n  return await response.json();\n};\n\nexport const getMovieById = async id => {\n  const URL = `${BASE_URL}3/movie/${id}?api_key=${API_KEY}&page=1`;\n  const response = await fetch(URL);\n  return await response.json();\n};\n\nexport const getSearchMovie = async (value, page) => {\n  const URL = `${BASE_URL}3/search/movie?query=${value}&include_adult=false&language=en-US&page=${page}&api_key=${API_KEY}`;\n  const response = await fetch(URL);\n  return await response.json();\n};\n\nexport const getCastOfMovie = async id => {\n  const URL = `${BASE_URL}3/movie/${id}/credits?language=en-US&api_key=${API_KEY}`;\n  const response = await fetch(URL);\n  return await response.json();\n};\n\nexport const getReviewsOfMovie = async id => {\n    const URL = `${BASE_URL}3/movie/${id}/reviews?language=en-US&api_key=${API_KEY}&page=1`;\n      const response = await fetch(URL);\n      return await response.json();\n}"],"names":["CastListItemContainer","styled","CastListItemText","Span","ReviewsLi","ReviewsUl","ReviewerText","reviews","map","info","author","content","id","useState","setReviews","error","setError","moviesId","useParams","useEffect","getReviewsOfMovie","then","data","results","catch","length","NoReviewsAndCast","NoReviewsTextAndCast","API_KEY","BASE_URL","getTrendingMovies","URL","fetch","response","json","getMovieById","getSearchMovie","value","page","getCastOfMovie"],"sourceRoot":""}